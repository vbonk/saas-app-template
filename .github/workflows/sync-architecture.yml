name: Sync to Architecture Repository

on:
  push:
    branches: [main]
    paths:
      - 'SECURITY.md'

jobs:
  sync-to-architecture:
    name: Sync Template Changes to Architecture
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      pull-requests: write
    
    steps:
      - name: Checkout Template Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ARCHITECTURE_SYNC_TOKEN }}
      
      - name: Clone Architecture Repository
        run: |
          git clone https://x-access-token:${{ secrets.ARCHITECTURE_SYNC_TOKEN }}@github.com/${{ github.repository_owner }}/saas-ecosystem-architecture.git arch-repo
          cd arch-repo
          git config user.name "Template Sync Bot"
          git config user.email "template-sync@users.noreply.github.com"
          sync_branch="template-sync-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$sync_branch"
          echo "sync_branch=$sync_branch" >> $GITHUB_ENV
      
      - name: Sync SECURITY.md
        run: |
          echo "Syncing SECURITY.md..."
          
          if [ -f "arch-repo/SECURITY.md" ]; then
            echo "Found existing SECURITY.md"
            if grep -q "<!-- TEMPLATE_SECURITY_START -->" arch-repo/SECURITY.md; then
              echo "Removing existing template section with sentinels..."
              perl -0pe 's/<!-- TEMPLATE_SECURITY_START -->.*?<!-- TEMPLATE_SECURITY_END -->//gs' arch-repo/SECURITY.md > arch-repo/SECURITY.md.clean
              mv arch-repo/SECURITY.md.clean arch-repo/SECURITY.md
            elif grep -q "## Template Repository Security Standards" arch-repo/SECURITY.md; then
              echo "Found legacy template content without sentinels - using safe content-based removal..."
              # Create a backup for safety
              cp arch-repo/SECURITY.md arch-repo/SECURITY.md.backup
              
              # Use a safer approach: check if we can identify the exact template content
              # by comparing with what we're about to add
              if grep -q "## Supported Versions" arch-repo/SECURITY.md && grep -q "Reporting a Vulnerability" arch-repo/SECURITY.md; then
                echo "Found template content signatures - removing known template sections..."
                
                # Remove only the specific content we know came from the template
                # This is much safer than relying on document structure
                python3 -c "
import re
import sys

# Read the current file
with open('arch-repo/SECURITY.md', 'r') as f:
    content = f.read()

# Define the exact start pattern we're looking for
start_pattern = r'^## Template Repository Security Standards$'
# Look for template-specific content patterns to find the end
template_patterns = [
    r'## Supported Versions',
    r'## Reporting a Vulnerability', 
    r'This security policy applies to the template itself'
]

# Find the start
start_match = re.search(start_pattern, content, re.MULTILINE)
if start_match:
    start_pos = start_match.start()
    
    # Find the end by looking for the last template-specific pattern
    end_pos = len(content)  # Default to end of file
    for pattern in reversed(template_patterns):
        matches = list(re.finditer(pattern, content, re.MULTILINE))
        if matches:
            # Find the end of the last match for this pattern
            last_match = matches[-1]
            # Look for the next line after this section
            next_line = content.find('\n', last_match.end())
            if next_line != -1:
                end_pos = next_line + 1
            break
    
    # Remove the template section
    new_content = content[:start_pos] + content[end_pos:]
    
    # Write the cleaned content
    with open('arch-repo/SECURITY.md.clean', 'w') as f:
        f.write(new_content)
    
    print(f'Removed template content from position {start_pos} to {end_pos}')
else:
    print('Could not find template section start pattern')
    # Copy original file if we can\'t find the pattern
    with open('arch-repo/SECURITY.md.clean', 'w') as f:
        f.write(content)
"
                mv arch-repo/SECURITY.md.clean arch-repo/SECURITY.md
                echo "‚úÖ Legacy template content safely removed using content signatures"
              else
                echo "‚ö†Ô∏è Template content signatures not found - skipping legacy cleanup to preserve architecture content"
              fi
            else
              echo "No existing template content found - will append new content"
            fi
          fi
          
          echo "" >> arch-repo/SECURITY.md
          echo "<!-- TEMPLATE_SECURITY_START -->" >> arch-repo/SECURITY.md
          echo "## Template Repository Security Standards" >> arch-repo/SECURITY.md
          echo "" >> arch-repo/SECURITY.md
          cat SECURITY.md >> arch-repo/SECURITY.md
          echo "" >> arch-repo/SECURITY.md
          echo "<!-- TEMPLATE_SECURITY_END -->" >> arch-repo/SECURITY.md
      
      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh
      
      - name: Commit and Create PR
        run: |
          cd arch-repo
          git add SECURITY.md
          
          if git diff --staged --quiet; then
            echo "No changes to sync"
            exit 0
          fi
          
          git commit -m "Sync SECURITY.md from template repository"
          git remote set-url origin https://x-access-token:${{ secrets.ARCHITECTURE_SYNC_TOKEN }}@github.com/${{ github.repository_owner }}/saas-ecosystem-architecture.git
          git push origin "$sync_branch"
          
          gh pr create \
            --repo "${{ github.repository_owner }}/saas-ecosystem-architecture" \
            --title "Sync SECURITY.md from template" \
            --body "Automated sync of SECURITY.md from template repository" \
            --head "$sync_branch" \
            --base "main"
        env:
          GH_TOKEN: ${{ secrets.ARCHITECTURE_SYNC_TOKEN }
      
      - name: Cleanup Old Sync Branches
        if: always()
        run: |
          echo "üßπ Cleaning up old sync branches..."
          # Clean up branches older than 7 days to keep repo tidy
          gh api repos/${{ github.repository_owner }}/saas-ecosystem-architecture/branches \
            --jq '.[] | select(.name | startswith("template-sync-")) | .name' | \
          while IFS= read -r branch_name; do
            if [ -n "$branch_name" ]; then
              # Extract date from branch name (format: template-sync-YYYYMMDD-HHMMSS)
              branch_date=$(echo "$branch_name" | sed 's/template-sync-\([0-9]\{8\}\)-.*/\1/')
              if [ -n "$branch_date" ] && [ ${#branch_date} -eq 8 ]; then
                # Check if branch is older than 7 days
                current_date=$(date +%Y%m%d)
                days_old=$(( ($(date -d "$current_date" +%s) - $(date -d "$branch_date" +%s)) / 86400 ))
                if [ $days_old -gt 7 ]; then
                  echo "üóëÔ∏è Deleting old branch: $branch_name (${days_old} days old)"
                  gh api -X DELETE repos/${{ github.repository_owner }}/saas-ecosystem-architecture/git/refs/heads/$branch_name || true
                fi
              fi
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.ARCHITECTURE_SYNC_TOKEN }}