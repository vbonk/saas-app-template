name: Documentation Generation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * 0'  # Weekly documentation refresh

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate README
        run: node scripts/generate-docs.js --type=readme
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPOSITORY_NAME: ${{ github.repository }}

      - name: Generate Architecture Documentation
        run: node scripts/generate-docs.js --type=architecture
        env:
          STACK_CONFIG: ${{ vars.STACK_CONFIG }}

      - name: Generate API Documentation
        run: |
          # Extract API routes and generate documentation
          node scripts/generate-docs.js --type=api
          # Generate OpenAPI spec if applicable
          if [ -f "scripts/generate-openapi.js" ]; then
            node scripts/generate-openapi.js
          fi

      - name: Update Architecture Diagrams
        run: |
          # Generate C4 diagrams based on code structure
          node scripts/update-architecture.js
          # Render PlantUML diagrams if any exist
          if ls docs/diagrams/*.puml 1> /dev/null 2>&1; then
            npm run render-diagrams
          fi

      - name: Generate Deployment Guide
        run: |
          # Generate deployment documentation based on Railway config
          node scripts/generate-docs.js --type=deployment
        env:
          RAILWAY_CONFIG: ${{ vars.RAILWAY_CONFIG }}

      - name: Update Changelog
        run: |
          # Generate changelog from git history and PR descriptions
          npx conventional-changelog -p angular -i CHANGELOG.md -s

      - name: Validate Documentation Quality
        run: |
          # Check documentation completeness and quality
          node scripts/validate-docs.js
          # Lint markdown files
          npx markdownlint docs/**/*.md --fix

      - name: Commit Documentation Updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/
          git add CHANGELOG.md
          if git diff --staged --quiet; then
            echo "No documentation changes to commit"
          else
            git commit -m "docs: auto-update documentation [skip ci]"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ“š Documentation has been automatically updated based on code changes.'
            })

