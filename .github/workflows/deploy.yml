name: Deploy

on:
  push:
    branches: [main, develop]
  workflow_run:
    workflows: ["Tests", "Security"]
    types: [completed]
    branches: [main, develop]

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/develop' &&
      (github.event_name == 'push' || 
       (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'))
    environment: staging
    permissions:
      contents: read
      actions: read
      deployments: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci
        
      - name: Build Application
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Deploy to Railway Staging
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          # Railway deployment would happen here
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          
      - name: Health Check
        run: |
          sleep 30
          if [ -n "${{ secrets.STAGING_URL }}" ]; then
            curl -f "${{ secrets.STAGING_URL }}/api/health" || exit 1
          fi

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' &&
      (github.event_name == 'push' || 
       (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'))
    environment: production
    permissions:
      contents: read
      actions: read
      deployments: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci
        
      - name: Build Application
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Run Database Migrations
        run: |
          if [ -f "package.json" ] && grep -q "db:deploy" package.json; then
            npm run db:deploy
          fi
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          
      - name: Deploy to Railway Production
        run: |
          echo "ðŸš€ Deploying to production environment..."
          # Railway deployment would happen here
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          
      - name: Health Check
        run: |
          sleep 30
          if [ -n "${{ secrets.PRODUCTION_URL }}" ]; then
            echo "::add-mask::${{ secrets.PRODUCTION_URL }}"
            curl -f "${{ secrets.PRODUCTION_URL }}/api/health" || exit 1
          fi
          
      - name: Update Documentation
        run: |
          if [ -f "package.json" ] && grep -q "docs:generate" package.json; then
            npm run docs:generate
          fi
          
      - name: Create Release
        if: contains(github.event.head_commit.message, 'release:')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## ðŸš€ Release v${{ github.run_number }}
            
            **Deployed**: ${{ github.event.head_commit.timestamp }}
            **Commit**: ${{ github.sha }}
            
            ### Changes
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false